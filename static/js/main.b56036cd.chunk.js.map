{"version":3,"sources":["practice/actions/songlist.js","App.js","serviceWorker.js","practice/reducers/Songslistreducer.js","practice/reducers/Rootreducer.js","index.js","practice/store/store.js"],"names":["datafetchSuccess","data","type","payload","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onchangehandler","event","setState","song_name","target","value","dispatch","fetch","then","result","json","console","log","typesong","state","bind","assertThisInitialized","mylist","AvailableSonglistlist","length","List","react_default","a","createElement","results","map","item","trackName","artistName","collectionId","style","backgroundColor","color","row","col","span","offset","className","input","placeholder","name","onKeyUp","Component","connect","Songlist","Boolean","window","location","hostname","match","combineReducers","arguments","undefined","action","objectSpread","store","createStore","rootreducer","applyMiddleware","thunk","jsx","es","src_App","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6LAcO,IAAMA,EAAiB,SAACC,GAAD,MAAS,CACnCC,KAAK,aACLC,QAAQF,+CCPNG,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKVQ,gBAAkB,SAACC,GAEfR,EAAKS,SAAS,CACVC,UAAWF,EAAMG,OAAOC,QAE5B,IAAIjB,EAAOa,EAAMG,OAAOC,MACxBZ,EAAKD,MAAMc,SDtBZ,SAAkBlB,GACrB,OAAQ,SAAAkB,GACH,OAAOC,MAAM,wCAAwCnB,GACzDoB,KAAK,SAAAC,GAAM,OAAGA,EAAOC,SACrBF,KAAK,SAACpB,GACJuB,QAAQC,IAAIxB,EAAK,kBAChBkB,EAASnB,EAAiBC,OCgBNyB,CAASzB,KAV7BK,EAAKqB,MAAQ,CAAEX,UAAW,MAC1BV,EAAKO,gBAAkBP,EAAKO,gBAAgBe,KAArBrB,OAAAsB,EAAA,EAAAtB,QAAAsB,EAAA,EAAAtB,CAAAD,KAHRA,wEAiBf,IAAIwB,EAASrB,KAAKJ,MAAM0B,sBACxB,GAAqB,GAAjBD,EAAOE,OACP,IAAIC,EAAOC,EAAAC,EAAAC,cAAA,gCAIXH,EADeH,EAAOC,sBAAsBM,QAC5BC,IAAI,SAAAC,GAAI,OACpBL,EAAAC,EAAAC,cAAA,wBACaG,EAAKC,UADlB,kBAC4CD,EAAKE,WADjD,oBAC8EF,EAAKG,gBAG3F,OACIR,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAAEC,gBAAiB,UAAWC,MAAO,UACxCX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAKC,KAAM,GAAIC,OAAQ,GAClBf,EAAAC,EAAAC,cAAA,MAAIc,UAAU,gBAAd,eACAhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,YAAY,kBAAmBC,KAAK,YAAYC,QAAS7C,KAAKI,mBAEzEqB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAKC,KAAM,GAAIC,OAAQ,EAAGC,UAAU,gBAChChB,EAAAC,EAAAC,cAAA,UACKH,aAtCfsB,aAoDHC,cALS,SAAA7B,GACpB,MAAO,CACHI,sBAAuBJ,EAAM8B,WAGtBD,CAAyBpD,GCjDpBsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sFClBAL,EAAW,GCGFM,cAAgB,CAC3BN,SDFW,WAA8B,IAA7B9B,EAA6BqC,UAAAhC,OAAA,QAAAiC,IAAAD,UAAA,GAAAA,UAAA,GAArBP,EAAUS,EAAWF,UAAAhC,OAAA,EAAAgC,UAAA,QAAAC,EACzC,OAAQC,EAAOhE,MACX,IAAK,aACD,OAAOK,OAAA4D,EAAA,EAAA5D,CAAA,GACAoB,EADP,CACaI,sBAAsBmC,EAAO/D,UAE9C,QACI,OAAOwB,MEDbyC,ECFYC,YAAYC,EAAYC,YAAgBC,MDIpDC,EACFvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAUN,MAAOA,GACdlC,EAAAC,EAAAC,cAACuC,EAAD,OAGPnD,QAAQC,IAAI2C,EAAMQ,YAClBC,IAASC,OAAOL,EAAKM,SAASC,eAAe,SHiHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9D,KAAK,SAAA+D,GACjCA,EAAaC","file":"static/js/main.b56036cd.chunk.js","sourcesContent":["export function typesong(data) {\r\n    return  dispatch =>{\r\n         return fetch(\"https://itunes.apple.com/search?term=\"+data)\r\n    .then(result=> result.json())\r\n    .then((data)=>{\r\n       console.log(data,\"data in action\")\r\n        dispatch(datafetchSuccess(data));\r\n    })\r\n   \r\n    }\r\n   \r\n}\r\n\r\n\r\nexport const datafetchSuccess=(data)=>({\r\n    type:\"DATA_FETCH\",\r\n    payload:data\r\n})\r\n\r\n","import React, { Component } from \"react\";\nimport ReactDom from \"react-dom\";\nimport { typesong } from \"./practice/actions/songlist\";\nimport { Input } from 'antd';\nimport 'antd/dist/antd.css';\nimport { Row, Col } from 'antd';\nimport { connect } from \"react-redux\";\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { song_name: null };\n        this.onchangehandler = this.onchangehandler.bind(this);\n    }\n\n    onchangehandler = (event) => {\n        // console.log(event.target.value);\n        this.setState({\n            song_name: event.target.value\n        })\n        var data = event.target.value;\n        this.props.dispatch(typesong(data));\n    }\n\n\n    render() {\n        var mylist = this.props.AvailableSonglistlist;\n        if (mylist.length == 0) {\n            var List = <li>No Song Found</li>\n        }\n        else {\n            var Songlist = mylist.AvailableSonglistlist.results;\n            List = Songlist.map(item => (\n                <li>\n                 TrackName: {item.trackName},  ArtistName: {item.artistName},  CollectionId: {item.collectionId}</li>\n            ));\n        }\n        return (\n            <div style={{ backgroundColor: \"#2a283d\", color: \"wheat\" }}>\n                     <Row>\n                       <Col span={14} offset={5}>\n                            <h1 className=\"main_heading\">iTunes List</h1>\n                            <Input placeholder=\"Enter Song Name\"  name=\"song_name\" onKeyUp={this.onchangehandler}/> \n                        </Col>\n                        <Col span={14} offset={5} className=\"listing_part\">\n                            <ul>\n                                {List}\n                            </ul>\n                        </Col>\n                    </Row>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        AvailableSonglistlist: state.Songlist\n    };\n};\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const Songlist = [];\r\n\r\nexport default (state = Songlist, action) => {\r\n    switch (action.type) {\r\n        case 'DATA_FETCH':\r\n            return {\r\n                ...state,AvailableSonglistlist:action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import SongsListReducer from './Songslistreducer';\r\nimport {combineReducers} from 'redux';\r\n\r\nexport default combineReducers({\r\n    Songlist:SongsListReducer,\r\n    \r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Mystore from './practice/store/store';\nimport {Provider} from 'react-redux';\n\nconst store = Mystore();\n\nconst jsx= (\n    <Provider store={store}>\n       <App />          \n    </Provider>\n)\nconsole.log(store.getState())\nReactDOM.render(jsx, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n\n// const element=<h1>welcome to Website</h1>\n\n// ReactDOM.render(element,document.getElementById('root'));","import {createStore,combineReducers,applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootreducer from '../reducers/Rootreducer';\r\n\r\n\r\nexport default()=>{\r\n    const store = createStore(rootreducer,applyMiddleware(thunk));\r\n    return store;\r\n}\r\n\r\n"],"sourceRoot":""}